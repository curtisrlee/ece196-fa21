{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"fire/","text":"Intro to Firebase This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"Firebase"},{"location":"fire/#intro-to-firebase","text":"This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"Intro to Firebase"},{"location":"rpi/","text":"Intro to RPi This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"Raspberry Pi"},{"location":"rpi/#intro-to-rpi","text":"This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"Intro to RPi"},{"location":"scrap/","text":"Buttons Now to see some Bootstrap in action, we first can style our checkboxes. Remove the \"Select All\" button and replace the entire <form> with this: <form v-on:change=\"updateColor()\"> <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.r}\"> <input type=\"checkbox\" v-model=\"color.r\" > Red </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.g}\"> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.b}\"> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> <button v-if=\"color.r && color.g && color.b\" class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(false); updateColor()\">Deselect All</button> <button v-else class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> </div> </form> Refresh the page and we see a few new things are going on here: The buttons are wrapped in a new div of class=\"btn-group btn-group-toggle\" . This is actually two classes: btn-group turns the buttons into a single bar btn-group-toggle replaces checkboxes with toggle buttons Each label gained 3 new classes: btn makes it a button shape btn-secondary makes it the secondary color v-bind:class=\"{active: color.r}\" adds the active class depending on whether the value is true . This will make the button look darker when it is checked. We also added a Deselect All button. Not entirely related, but allows us to see the transitions better.","title":"Scrap"},{"location":"scrap/#buttons","text":"Now to see some Bootstrap in action, we first can style our checkboxes. Remove the \"Select All\" button and replace the entire <form> with this: <form v-on:change=\"updateColor()\"> <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.r}\"> <input type=\"checkbox\" v-model=\"color.r\" > Red </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.g}\"> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.b}\"> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> <button v-if=\"color.r && color.g && color.b\" class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(false); updateColor()\">Deselect All</button> <button v-else class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> </div> </form> Refresh the page and we see a few new things are going on here: The buttons are wrapped in a new div of class=\"btn-group btn-group-toggle\" . This is actually two classes: btn-group turns the buttons into a single bar btn-group-toggle replaces checkboxes with toggle buttons Each label gained 3 new classes: btn makes it a button shape btn-secondary makes it the secondary color v-bind:class=\"{active: color.r}\" adds the active class depending on whether the value is true . This will make the button look darker when it is checked. We also added a Deselect All button. Not entirely related, but allows us to see the transitions better.","title":"Buttons"},{"location":"web/","text":"Intro to Frontend The modern World Wide Web is truly a world of chaos and anarchy, with competing powers rising and falling, along with their preferred way of doing things. Brought to you by your favorite web browser! Fundamentals The most fundamental concepts of Web Development essentially boil down to these three (3): HTML The most basic building blocks of a webpage. Most atomic elements are various \"tags\" containing information. Tags can have attributes to assign special characteristics or functionality to them. Tags can be nested. The browser reads all these tags and builds a DOM (Document Object Model) Example: <html> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> </html> CSS Tells the browser how to render the website. Makes it look good! Defined by \"selecting\" specific HTML tags and setting styling attributes to them. Tells the browser how to render elements of the DOM. Example: body { background-color: beige; text-align: center; } JavaScript Makes the website come alive! Can manipulate HTML elemeents in the DOM. Pieces of software (programming) that runs in the browser. Example: document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; Getting Started Starting an HTML document from scratch is fairly straightforward. Create a new folder for your project. In the folder, create a empty text file named index.html and open it in VS Code. By copying and pasting the examples shown previously, adding some extra tags, we can make this: <!DOCTYPE html> <html> <head> <title>My App</title> </head> <style> body { background-color: beige; text-align: center; } </style> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> <script> document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; </script> </html> We can now open the file with a web browser to see the results. Notice: The background of the page is colored beige, and the text is centered on the page. This is consistent with the CSS styling we specified. The big <h1> text shows \"Hello JavaScript\", which is not the original text, but rather set by our JavaScript script. If we remove that JavaScript snippet from our page, this will no longer happen. We can also create more interesting behavior by changing the JavaScript. Try replacing the code in the <script> tag with this: setTimeout(function(){ document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; }, 1000); And then save the file and refresh the page. Notice the text will now change after one (1) second! Important Most modern browsers have a \"lazy\" refresh that doesn't always reload all our changes. To actually refresh we have to perform a \"hard\" refresh which in Chrome can be done by holding down Shift and refreshing, or right clicking the refresh button. Serving the Website While opening the file as .html in the browser works for now, in later steps it will not be sufficient. We will need a proper HTTP server to serve the webpage. Luckily, we can use Python's built-in server: Open a terminal in the folder with the index.html file. Run python -m http.server In the browser, go to localhost:8000 The webpage should appear as before, but from a HTTP URL (of your own computer). Frameworks To bring order to the wild atomized world wrought by HTML, CSS, and JavaScript, various competing powers have attempted to create structure with Web Frameworks. What are Frameworks? Usually open source projects, sometimes maintained by big corps (Google, Facebook, etc). Introduce a standarized way of writing patterns of code that occur frequently. Most importantly: greatly simplifies code and makes our lives easier! So many Frameworks! The World Wide Web is a fast paced world that changes frequently, and so do frameworks. Most frameworks commonly deployed today have only been created within the past decade. Choosing between the many competing options can be a daunting task. However to make our life easier and to get our app quickly off the ground without suffering too much learning curve, we are going to use this particular combination: Vue.js - HTML+JavaScript Framework Bootstrap - CSS framework Intro to Vue.js Vue is one of latest and greatest rising stars of the Frontend Framework scene. Compared to the more popular React or Angular, Vue is relatively easy to get working off the ground, without complicated setup. Adding Vue To include the Vue library into our page, we can use this script tag: <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.12\"></script> Since the browser loads the DOM in order, we must place this before we write any Javascript code that uses Vue. The best place in our current page is after <body> but before <script> . Tip If we open Developer Tools in our browser (F12 in Chrome), click the Console tab, we should now see some messages about Vue to confirm it was loaded successfully. After that, we can create a Vue object called vm (within the script block) like this: var vm = new Vue({}) Each Vue instance is defined by a dictionary with various fields specifying variables, functions, and special behavior. The ones we'll be using are: el - string name of id of the HTML tag to contain the app data - dictionary of variables used created - special function that runs when the app is created (similar to setup() in Arduino) methods - dictionary of methods/functions used So, before filling those fields, our instantiation should look like this: var vm = new Vue({ el: \"\", data: {}, created: function() {}, methods: {} }) For our HTML we want to create a new <div> element with id=\"app\" to wrap the content of our page. Then we declare el: \"app\" in our Vue object. Our code should now look like this: ... <body> <div id=\"app\"> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: {}, created: function() {}, methods: {} }) </script> ... Note: we can remove the JavaScript code from the previous section. One-Way Data Binding To witness the full power of Vue, we can set up what's called a data binding: Change the text in our <h1> to {{ titleText }} . Add a string titleText to data. Our code now: ... <body> <div id=\"app\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: { titleText: \"Hello World from Vue!\" }, created: function() {}, methods: {} }) </script> ... Now if we refresh the page we should see that Vue changes the titleText into what we specified! Tip Another useful perk of Vue is how easy it is to debug our application with the built-in browser Console. To open the console in Chrome, we can open Developer Tools or press F12 and click the Console tab. Our data fields are all properties of the Vue object, and since our Vue object is called vm , we can address titleText as vm.titleText Try typing vm.titleText into the console. What does it output? is this expected? Try typing vm.titleText = 'ECE 196' into the console. Now look at the HTML page. What is the <h1> text now? One of the most powerful advantages of Vue data binding is how values in the HTML and JavaScript portions of our webpage are seamlessly connected, in real time. If we wanted to achieve the same with pure JavaScript, it would not only take much more time writing and debugging more code, but the complexity would also grow exponentially when we add more stuff to our webpage. Two-Way Data Binding We just saw how to get Vue to put variables into HTML, but we also want to be able to put HTML variables into Vue. One way to do this is with two-way data binding. Before we do that, we need to create something in HTML designed to handle user input. One type of common input is the checkbox. We can add three checkboxes to the page like this: <div id=\"app\"> ... <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> </div> Next we want to declare variables in Vue for these values to go. One way we can do this is to add a dictionary under data with 3 boolean values like this: data: { ... color: { r: false, g: false, b: false } }, If we refresh the page, we should see our three checkboxes appear. Tip To verify that everything works we can use the console again: Tick an arbitrary combination of the boxes on our page type vm.color in the browser console expand the Observer object click each color field to load the value Is this what we'd expect? To make things really interesting we can reflect the values back onto our HTML page. Under the checkboxes, we can add another <p> like this: <p>Selected Values: {{ color }}</p> When the boxes are ticked, we can see the dictionary updated automatically on our page! Directives Directives are special HTML tag attributes that define behavior in Vue but are otherwise ignored by the browser. As you may have noticed in the previous section, we used the v-model directive to tell Vue that we want two-way data binding on our checkbox values. There are a multitude of other directives in Vue to accomplish all kinds of tasks, but we will only use a few ones here: v-model - creates two way data-binding v-if - displays an element only if the condition is true v-else - compliment for v-if v-on:change or @change - runs a function when the element is changed v-on:click or @click - runs a function when the element is clicked To see these in action, we can create some more HTML elements with Vue directives. Replace: <p>Selected Values: {{ color }}</p> with this: <button type=\"button\" v-on:click=\"selectAll(true)\">Select All</button> <p v-if=\"color.r || color.g || color.b\">Selected Values: {{ color }} </p> <p v-else>No colors are selected.</p> And in our Vue object, add a method called selectAll() that takes a parameter value like this: methods: { selectAll: function(value) { this.color.r = value; this.color.g = value; this.color.b = value; } } Info Since color is a field of vm , and the function runs within vm 's scope, we reference color as this.color Now when we refresh the page, we should see: Two-way data binding on the checkboxes still works. Different <p> element is shown if no checkboxes are ticked. Clicking the button will run a function that ticks all the checkboxes. Connecting to Firebase This sections assumes we already have a Firebase app set up. Adding Firebase To include the Firebase Core and Realtime Database libraries on our webpage, we can add the following lines similar to including the Vue library: <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-app.js\"></script> <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-database.js\"></script> Now outside and before our vm = new Vue() object, we need to initialize our objects called firebase and database : var firebaseConfig = { ... }; firebase.initializeApp(firebaseConfig); database = firebase.database() var vm = new Vue({ ... Replacing firebaseConfig with the one given in our Firebase App dashboard. Info It's possible to put the Firebase objects within our Vue object, but for our purposes it's easier to leave them seperate. Reading Data To read color data from Firebase, lets first add a new method in our Vue called setupColorListener() . This will create a listener in the background of our web app that listens for any changes in our database entry, and runs a function every time Firebase sends us these changes. setupColorListener: function() { var colorDataRef = database.ref('path/to/ref'); colorDataRef.on('value', function(snapshot) { vm.color = snapshot.val(); }); }, But note that so far our Firebase data is structured like this: Therefore, if we want the color data, our reference path should be changed to 'data/color' , which gives us: var colorDataRef = database.ref('data/color'); Info The callback function explicitly references color as vm.color and not this.color . This is because the callback is actually run within the Firebase object, which is outside the scope of vm . And we want the function to be run as soon as the page loads. So it makes sense to call the function under our created initialization function: created: function() { this.setupColorListener(); }, In Firebase Dashboard, if we now change the values within color , we should now see them update the checkboxes on our page, in real time! Writing Data While we can recieve data from Firebase, we also want changes to the checkboxes to also be sent to Firebase. This can be done with the v-on:change directive. Start by adding a new method called updateColor() in our Vue's methods: updateColor: function() { database.ref('data/color').set(this.color); } Next we want to enclose the checkboxes into a new form element with the directive like this: <form v-on:change=\"updateColor()\"> <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> </form> Similarily, we want to add an v-on:click directive to the button as well: <button type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> Every time Vue detects a change in the <form> containing all the checkboxes, it will run the function that submits the changed color dictionary. If we tick/untick any of the checkboxes, we should also be able to now see the values get updated in Firebase Dashboard as well! Intro to CSS There are two main ways to fine-tune the way our HTML elements look. The class attribute By assigning our element to a class value defined in <style> . We already have seen some of this in action. If we change our <style> block to this: <style> body { background-color: lightblue; } </style> We see that: The background color is changed to lightblue Everything reverts back to being left aligned, which is the default. The style attribute Can also inject some CSS properties directly into the tag. For very minor finer-tuning. For example this will center all the text inside the <div> : <div style=\"text-align: center;\"> I am centered text. </div> Fixing Loading Glitches When we refresh the page, sometimes we can still see {{ }} in the HTML before Vue loads. We can actually use a special Vue directive v-cloak along with some simple CSS to fix this. Add this to the style block: [v-cloak] { display: none; } And also add the directive onto the main <div> of the app: <div id=\"app\" v-cloak> Now the page will no longer flash those {{ }} before Vue loads. Intro to Bootstrap At this point you may have noticed our website overall still looks pretty unattractive. We could write more CSS from scratch to make our website look exactly how we want, but in most cases that's a waste of time. Instead, we can use another framework for CSS called Bootstrap. Bootstrap basically gives us a complete CSS stylesheet with designs for all the common UI elements to use in our app, including page layouts, fonts, buttons, textboxes, etc. Adding Bootstrap Similarly to including JavaScript, we can include CSS stylesheets before our existing <style> element like this: <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"> When we refresh the page, we will immediately see the default font changed to a sans-serif type, the default for Bootstrap. To assign HTML tags style definitions from CSS, we add class attributes. Grid System Bootstrap's approach to page layout is a dynamic grid system. We can utilize this to improve the layout of the page. Here is an example of a basic 3 column layout: <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm\"> One of three columns </div> <div class=\"col-sm\"> One of three columns </div> <div class=\"col-sm\"> One of three columns </div> </div> </div> One possible implementation on our page: Margins Margins are useful to put set amounts of space between different elements. In Bootstrap, margins can be specified with class attributes with two letters and a number like this: class=\"mt-5\" puts a margin on top of size 5 class=\"ml-2\" puts margin on the left of size 2 They can also be combined: class=\"mt-5 mb-5\" will put a margin on both top and bottom of size 5 We can also have margin on all sides: class=\"m-5\" will put a margin on all sides of size 5 We can wrap our page title in a 1x1 container and give it some margin from the top of the page like this: <div class=\"container mt-5\"> <div class=\"row\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </div> </div> Cards Cards are an all-purpose way to hold content. Different types of content can also be mix and matched in a card. Here is an example of a basic card: <div class=\"card\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <div class=\"card-body\"> <h5 class=\"card-title\">Device: Raspberry Pi</h5> <p class=\"card-text\">The Raspberry Pi is awesome!</p> <a href=\"https://www.raspberrypi.org/\" class=\"btn btn-primary\">Learn More</a> </div> </div> </div> Combining cards with layouts we could create this: Tables To improve our display of the \"Selected Values\", we can convert it into a Bootstrap table. Creating a table can first be done with HTML tags like this: <table class=\"table\"> <thead class=\".thead-light\"> <tr> <th scope=\"col\">Type</th> <th scope=\"col\">Color</th> <th scope=\"col\">On</th> </tr> </thead> <tbody> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Red</td> <td> <input type=\"checkbox\" v-model=\"color.r\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Green</td> <td> <input type=\"checkbox\" v-model=\"color.g\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Blue</td> <td> <input type=\"checkbox\" v-model=\"color.b\" v-on:change=\"updateColor()\"> </td> </tr> </tbody> </table> Info Lists or tabular data of large or arbitrary sizes should be generated using the v-for directive (akin to a for loop), but since we aren't using any we won't go over it in this course. Also, to get the icons to display properly, add this class to our custom <style> block: .icon { width: 2em; height: 2em; } Adding the table to one of the cards shown previously could look like this: Buttons Bootstrap also give us templates for buttons, as well as \"button groups\" which can combine adjacent buttons into a single bar. <div class=\"btn-group\" role=\"group\"> <button v-on:click=\"selectAll(true); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Select All</button> <button v-on:click=\"selectAll(false); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Deselect All</button> </div> Lists We can use Bootstrap List Groups on top of an HTML list to make our sensor data card look nice. <ul class=\"list-group\"> <li class=\"list-group-item\">Temperature: 40C </li> <li class=\"list-group-item\">Humidity: 50%</li> </ul> Final Touches To make all the cards the same height we can add d-flex to each column <div> , and then add w-100 to each card <div> so that the fill the column properly, like this: ... <div class=\"col-sm d-flex\"> <div class=\"card w-100\"> ... Info Fine tuning layout specifics can get very time consuming so we won't go over too many tricky details. Also replacing the checkboxes with toggle switches are a nice touch: <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.r\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-r\"> <label class=\"custom-control-label\" for=\"color-r\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.g\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-g\"> <label class=\"custom-control-label\" for=\"color-g\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.b\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-b\"> <label class=\"custom-control-label\" for=\"color-b\"></label> </div> Finally, its a good idea to associate color with each entry on the LED table with some inline style attributes: style=\"background-color: lightcoral;\" style=\"background-color: lightgreen;\" style=\"background-color: lightskyblue;\" Here is what the final result can look like: Hosting on Github Pages to do Conclusion The content in this guide is by no means all-inclusive. In fact, we barely scratched the surface of what these frameworks have to offer. For more features and help it's definitely worth looking at the documentation these products.","title":"Frontend"},{"location":"web/#intro-to-frontend","text":"The modern World Wide Web is truly a world of chaos and anarchy, with competing powers rising and falling, along with their preferred way of doing things. Brought to you by your favorite web browser!","title":"Intro to Frontend"},{"location":"web/#fundamentals","text":"The most fundamental concepts of Web Development essentially boil down to these three (3): HTML The most basic building blocks of a webpage. Most atomic elements are various \"tags\" containing information. Tags can have attributes to assign special characteristics or functionality to them. Tags can be nested. The browser reads all these tags and builds a DOM (Document Object Model) Example: <html> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> </html> CSS Tells the browser how to render the website. Makes it look good! Defined by \"selecting\" specific HTML tags and setting styling attributes to them. Tells the browser how to render elements of the DOM. Example: body { background-color: beige; text-align: center; } JavaScript Makes the website come alive! Can manipulate HTML elemeents in the DOM. Pieces of software (programming) that runs in the browser. Example: document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\";","title":"Fundamentals"},{"location":"web/#getting-started","text":"Starting an HTML document from scratch is fairly straightforward. Create a new folder for your project. In the folder, create a empty text file named index.html and open it in VS Code. By copying and pasting the examples shown previously, adding some extra tags, we can make this: <!DOCTYPE html> <html> <head> <title>My App</title> </head> <style> body { background-color: beige; text-align: center; } </style> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> <script> document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; </script> </html> We can now open the file with a web browser to see the results. Notice: The background of the page is colored beige, and the text is centered on the page. This is consistent with the CSS styling we specified. The big <h1> text shows \"Hello JavaScript\", which is not the original text, but rather set by our JavaScript script. If we remove that JavaScript snippet from our page, this will no longer happen. We can also create more interesting behavior by changing the JavaScript. Try replacing the code in the <script> tag with this: setTimeout(function(){ document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; }, 1000); And then save the file and refresh the page. Notice the text will now change after one (1) second! Important Most modern browsers have a \"lazy\" refresh that doesn't always reload all our changes. To actually refresh we have to perform a \"hard\" refresh which in Chrome can be done by holding down Shift and refreshing, or right clicking the refresh button.","title":"Getting Started"},{"location":"web/#serving-the-website","text":"While opening the file as .html in the browser works for now, in later steps it will not be sufficient. We will need a proper HTTP server to serve the webpage. Luckily, we can use Python's built-in server: Open a terminal in the folder with the index.html file. Run python -m http.server In the browser, go to localhost:8000 The webpage should appear as before, but from a HTTP URL (of your own computer).","title":"Serving the Website"},{"location":"web/#frameworks","text":"To bring order to the wild atomized world wrought by HTML, CSS, and JavaScript, various competing powers have attempted to create structure with Web Frameworks.","title":"Frameworks"},{"location":"web/#what-are-frameworks","text":"Usually open source projects, sometimes maintained by big corps (Google, Facebook, etc). Introduce a standarized way of writing patterns of code that occur frequently. Most importantly: greatly simplifies code and makes our lives easier!","title":"What are Frameworks?"},{"location":"web/#so-many-frameworks","text":"The World Wide Web is a fast paced world that changes frequently, and so do frameworks. Most frameworks commonly deployed today have only been created within the past decade. Choosing between the many competing options can be a daunting task. However to make our life easier and to get our app quickly off the ground without suffering too much learning curve, we are going to use this particular combination: Vue.js - HTML+JavaScript Framework Bootstrap - CSS framework","title":"So many Frameworks!"},{"location":"web/#intro-to-vuejs","text":"Vue is one of latest and greatest rising stars of the Frontend Framework scene. Compared to the more popular React or Angular, Vue is relatively easy to get working off the ground, without complicated setup.","title":"Intro to Vue.js"},{"location":"web/#adding-vue","text":"To include the Vue library into our page, we can use this script tag: <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.12\"></script> Since the browser loads the DOM in order, we must place this before we write any Javascript code that uses Vue. The best place in our current page is after <body> but before <script> . Tip If we open Developer Tools in our browser (F12 in Chrome), click the Console tab, we should now see some messages about Vue to confirm it was loaded successfully. After that, we can create a Vue object called vm (within the script block) like this: var vm = new Vue({}) Each Vue instance is defined by a dictionary with various fields specifying variables, functions, and special behavior. The ones we'll be using are: el - string name of id of the HTML tag to contain the app data - dictionary of variables used created - special function that runs when the app is created (similar to setup() in Arduino) methods - dictionary of methods/functions used So, before filling those fields, our instantiation should look like this: var vm = new Vue({ el: \"\", data: {}, created: function() {}, methods: {} }) For our HTML we want to create a new <div> element with id=\"app\" to wrap the content of our page. Then we declare el: \"app\" in our Vue object. Our code should now look like this: ... <body> <div id=\"app\"> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: {}, created: function() {}, methods: {} }) </script> ... Note: we can remove the JavaScript code from the previous section.","title":"Adding Vue"},{"location":"web/#one-way-data-binding","text":"To witness the full power of Vue, we can set up what's called a data binding: Change the text in our <h1> to {{ titleText }} . Add a string titleText to data. Our code now: ... <body> <div id=\"app\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: { titleText: \"Hello World from Vue!\" }, created: function() {}, methods: {} }) </script> ... Now if we refresh the page we should see that Vue changes the titleText into what we specified! Tip Another useful perk of Vue is how easy it is to debug our application with the built-in browser Console. To open the console in Chrome, we can open Developer Tools or press F12 and click the Console tab. Our data fields are all properties of the Vue object, and since our Vue object is called vm , we can address titleText as vm.titleText Try typing vm.titleText into the console. What does it output? is this expected? Try typing vm.titleText = 'ECE 196' into the console. Now look at the HTML page. What is the <h1> text now? One of the most powerful advantages of Vue data binding is how values in the HTML and JavaScript portions of our webpage are seamlessly connected, in real time. If we wanted to achieve the same with pure JavaScript, it would not only take much more time writing and debugging more code, but the complexity would also grow exponentially when we add more stuff to our webpage.","title":"One-Way Data Binding"},{"location":"web/#two-way-data-binding","text":"We just saw how to get Vue to put variables into HTML, but we also want to be able to put HTML variables into Vue. One way to do this is with two-way data binding. Before we do that, we need to create something in HTML designed to handle user input. One type of common input is the checkbox. We can add three checkboxes to the page like this: <div id=\"app\"> ... <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> </div> Next we want to declare variables in Vue for these values to go. One way we can do this is to add a dictionary under data with 3 boolean values like this: data: { ... color: { r: false, g: false, b: false } }, If we refresh the page, we should see our three checkboxes appear. Tip To verify that everything works we can use the console again: Tick an arbitrary combination of the boxes on our page type vm.color in the browser console expand the Observer object click each color field to load the value Is this what we'd expect? To make things really interesting we can reflect the values back onto our HTML page. Under the checkboxes, we can add another <p> like this: <p>Selected Values: {{ color }}</p> When the boxes are ticked, we can see the dictionary updated automatically on our page!","title":"Two-Way Data Binding"},{"location":"web/#directives","text":"Directives are special HTML tag attributes that define behavior in Vue but are otherwise ignored by the browser. As you may have noticed in the previous section, we used the v-model directive to tell Vue that we want two-way data binding on our checkbox values. There are a multitude of other directives in Vue to accomplish all kinds of tasks, but we will only use a few ones here: v-model - creates two way data-binding v-if - displays an element only if the condition is true v-else - compliment for v-if v-on:change or @change - runs a function when the element is changed v-on:click or @click - runs a function when the element is clicked To see these in action, we can create some more HTML elements with Vue directives. Replace: <p>Selected Values: {{ color }}</p> with this: <button type=\"button\" v-on:click=\"selectAll(true)\">Select All</button> <p v-if=\"color.r || color.g || color.b\">Selected Values: {{ color }} </p> <p v-else>No colors are selected.</p> And in our Vue object, add a method called selectAll() that takes a parameter value like this: methods: { selectAll: function(value) { this.color.r = value; this.color.g = value; this.color.b = value; } } Info Since color is a field of vm , and the function runs within vm 's scope, we reference color as this.color Now when we refresh the page, we should see: Two-way data binding on the checkboxes still works. Different <p> element is shown if no checkboxes are ticked. Clicking the button will run a function that ticks all the checkboxes.","title":"Directives"},{"location":"web/#connecting-to-firebase","text":"This sections assumes we already have a Firebase app set up.","title":"Connecting to Firebase"},{"location":"web/#adding-firebase","text":"To include the Firebase Core and Realtime Database libraries on our webpage, we can add the following lines similar to including the Vue library: <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-app.js\"></script> <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-database.js\"></script> Now outside and before our vm = new Vue() object, we need to initialize our objects called firebase and database : var firebaseConfig = { ... }; firebase.initializeApp(firebaseConfig); database = firebase.database() var vm = new Vue({ ... Replacing firebaseConfig with the one given in our Firebase App dashboard. Info It's possible to put the Firebase objects within our Vue object, but for our purposes it's easier to leave them seperate.","title":"Adding Firebase"},{"location":"web/#reading-data","text":"To read color data from Firebase, lets first add a new method in our Vue called setupColorListener() . This will create a listener in the background of our web app that listens for any changes in our database entry, and runs a function every time Firebase sends us these changes. setupColorListener: function() { var colorDataRef = database.ref('path/to/ref'); colorDataRef.on('value', function(snapshot) { vm.color = snapshot.val(); }); }, But note that so far our Firebase data is structured like this: Therefore, if we want the color data, our reference path should be changed to 'data/color' , which gives us: var colorDataRef = database.ref('data/color'); Info The callback function explicitly references color as vm.color and not this.color . This is because the callback is actually run within the Firebase object, which is outside the scope of vm . And we want the function to be run as soon as the page loads. So it makes sense to call the function under our created initialization function: created: function() { this.setupColorListener(); }, In Firebase Dashboard, if we now change the values within color , we should now see them update the checkboxes on our page, in real time!","title":"Reading Data"},{"location":"web/#writing-data","text":"While we can recieve data from Firebase, we also want changes to the checkboxes to also be sent to Firebase. This can be done with the v-on:change directive. Start by adding a new method called updateColor() in our Vue's methods: updateColor: function() { database.ref('data/color').set(this.color); } Next we want to enclose the checkboxes into a new form element with the directive like this: <form v-on:change=\"updateColor()\"> <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> </form> Similarily, we want to add an v-on:click directive to the button as well: <button type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> Every time Vue detects a change in the <form> containing all the checkboxes, it will run the function that submits the changed color dictionary. If we tick/untick any of the checkboxes, we should also be able to now see the values get updated in Firebase Dashboard as well!","title":"Writing Data"},{"location":"web/#intro-to-css","text":"There are two main ways to fine-tune the way our HTML elements look. The class attribute By assigning our element to a class value defined in <style> . We already have seen some of this in action. If we change our <style> block to this: <style> body { background-color: lightblue; } </style> We see that: The background color is changed to lightblue Everything reverts back to being left aligned, which is the default. The style attribute Can also inject some CSS properties directly into the tag. For very minor finer-tuning. For example this will center all the text inside the <div> : <div style=\"text-align: center;\"> I am centered text. </div>","title":"Intro to CSS"},{"location":"web/#fixing-loading-glitches","text":"When we refresh the page, sometimes we can still see {{ }} in the HTML before Vue loads. We can actually use a special Vue directive v-cloak along with some simple CSS to fix this. Add this to the style block: [v-cloak] { display: none; } And also add the directive onto the main <div> of the app: <div id=\"app\" v-cloak> Now the page will no longer flash those {{ }} before Vue loads.","title":"Fixing Loading Glitches"},{"location":"web/#intro-to-bootstrap","text":"At this point you may have noticed our website overall still looks pretty unattractive. We could write more CSS from scratch to make our website look exactly how we want, but in most cases that's a waste of time. Instead, we can use another framework for CSS called Bootstrap. Bootstrap basically gives us a complete CSS stylesheet with designs for all the common UI elements to use in our app, including page layouts, fonts, buttons, textboxes, etc.","title":"Intro to Bootstrap"},{"location":"web/#adding-bootstrap","text":"Similarly to including JavaScript, we can include CSS stylesheets before our existing <style> element like this: <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"> When we refresh the page, we will immediately see the default font changed to a sans-serif type, the default for Bootstrap. To assign HTML tags style definitions from CSS, we add class attributes.","title":"Adding Bootstrap"},{"location":"web/#grid-system","text":"Bootstrap's approach to page layout is a dynamic grid system. We can utilize this to improve the layout of the page. Here is an example of a basic 3 column layout: <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm\"> One of three columns </div> <div class=\"col-sm\"> One of three columns </div> <div class=\"col-sm\"> One of three columns </div> </div> </div> One possible implementation on our page:","title":"Grid System"},{"location":"web/#margins","text":"Margins are useful to put set amounts of space between different elements. In Bootstrap, margins can be specified with class attributes with two letters and a number like this: class=\"mt-5\" puts a margin on top of size 5 class=\"ml-2\" puts margin on the left of size 2 They can also be combined: class=\"mt-5 mb-5\" will put a margin on both top and bottom of size 5 We can also have margin on all sides: class=\"m-5\" will put a margin on all sides of size 5 We can wrap our page title in a 1x1 container and give it some margin from the top of the page like this: <div class=\"container mt-5\"> <div class=\"row\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </div> </div>","title":"Margins"},{"location":"web/#cards","text":"Cards are an all-purpose way to hold content. Different types of content can also be mix and matched in a card. Here is an example of a basic card: <div class=\"card\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <div class=\"card-body\"> <h5 class=\"card-title\">Device: Raspberry Pi</h5> <p class=\"card-text\">The Raspberry Pi is awesome!</p> <a href=\"https://www.raspberrypi.org/\" class=\"btn btn-primary\">Learn More</a> </div> </div> </div> Combining cards with layouts we could create this:","title":"Cards"},{"location":"web/#tables","text":"To improve our display of the \"Selected Values\", we can convert it into a Bootstrap table. Creating a table can first be done with HTML tags like this: <table class=\"table\"> <thead class=\".thead-light\"> <tr> <th scope=\"col\">Type</th> <th scope=\"col\">Color</th> <th scope=\"col\">On</th> </tr> </thead> <tbody> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Red</td> <td> <input type=\"checkbox\" v-model=\"color.r\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Green</td> <td> <input type=\"checkbox\" v-model=\"color.g\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Blue</td> <td> <input type=\"checkbox\" v-model=\"color.b\" v-on:change=\"updateColor()\"> </td> </tr> </tbody> </table> Info Lists or tabular data of large or arbitrary sizes should be generated using the v-for directive (akin to a for loop), but since we aren't using any we won't go over it in this course. Also, to get the icons to display properly, add this class to our custom <style> block: .icon { width: 2em; height: 2em; } Adding the table to one of the cards shown previously could look like this:","title":"Tables"},{"location":"web/#buttons","text":"Bootstrap also give us templates for buttons, as well as \"button groups\" which can combine adjacent buttons into a single bar. <div class=\"btn-group\" role=\"group\"> <button v-on:click=\"selectAll(true); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Select All</button> <button v-on:click=\"selectAll(false); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Deselect All</button> </div>","title":"Buttons"},{"location":"web/#lists","text":"We can use Bootstrap List Groups on top of an HTML list to make our sensor data card look nice. <ul class=\"list-group\"> <li class=\"list-group-item\">Temperature: 40C </li> <li class=\"list-group-item\">Humidity: 50%</li> </ul>","title":"Lists"},{"location":"web/#final-touches","text":"To make all the cards the same height we can add d-flex to each column <div> , and then add w-100 to each card <div> so that the fill the column properly, like this: ... <div class=\"col-sm d-flex\"> <div class=\"card w-100\"> ... Info Fine tuning layout specifics can get very time consuming so we won't go over too many tricky details. Also replacing the checkboxes with toggle switches are a nice touch: <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.r\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-r\"> <label class=\"custom-control-label\" for=\"color-r\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.g\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-g\"> <label class=\"custom-control-label\" for=\"color-g\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.b\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-b\"> <label class=\"custom-control-label\" for=\"color-b\"></label> </div> Finally, its a good idea to associate color with each entry on the LED table with some inline style attributes: style=\"background-color: lightcoral;\" style=\"background-color: lightgreen;\" style=\"background-color: lightskyblue;\" Here is what the final result can look like:","title":"Final Touches"},{"location":"web/#hosting-on-github-pages","text":"to do","title":"Hosting on Github Pages"},{"location":"web/#conclusion","text":"The content in this guide is by no means all-inclusive. In fact, we barely scratched the surface of what these frameworks have to offer. For more features and help it's definitely worth looking at the documentation these products.","title":"Conclusion"}]}